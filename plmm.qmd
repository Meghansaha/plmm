---
format: html
theme:
  - lux
  - style.css
linkcolor: "#045D59"
toc-location: left
toc: true
toc-title: "Contents"
fontcolor: "#000000"
---

![](images/banner.png){fig-alt="Please Let Me Merge Before I Start Crying: And Other Things I've Said At The Git Terminal" fig-align="center" width="100%"}

# About

It's probably a safe bet to say that most of the Posit Community have at least heard of the version control system, "[git](https://en.wikipedia.org/wiki/Git)," or the developer platform "[GitHub](https://en.wikipedia.org/wiki/GitHub)." A smaller number of people can probably say they actually use git, but an even smaller number would possibly say they feel comfortable collaborating with git. This may be due to unique circumstances, like being a lone data science unicorn, having antiquated data workflows, or because users can't expand upon their git knowledge to introduce collaborative functionality to their workflows.

!["Git" seems to be the version control software of choice within the Posit Community.](images/git_logo.png){fig-alt="The Git Logo" fig-align="center"}

Whatever the reason, it is hard to deny how imperative version control is to collaborative data science work, and while git is not the only version control system that exists, its use in the Posit Community is undeniably strong, possibly due in part to RStudio's integration of the software along with the development of the [`usethis` package](https://usethis.r-lib.org/reference/index.html#git-and-github) as well.

***"Please Let Me Merge"*** is geared towards those who may feel comfortable working independently with git but need some confidence when working collaboratively. Just like novice drivers can learn to confidently (and **safely!**) merge onto <small>(*seemingly*)</small> intimidating highways, those new to collaborating with git can also conquer git merges with some exposure and preparation.

![When drivers finally learn what the 'acceleration lane' of a highway is.](images/initiald.gif){fig-alt="A gif from the anime Initial D with cars racing" fig-align="center"}

# Interacting With Git

For those of us that use git, we have a few options when it comes to interacting with git and github:

## RStudio Graphical User Interface (GUI)

For R users, this may be the most popular method of interacting with git. Undoubtedly due to RStudio's ability to shield users from the traditional terminal view. Users that interact with git in this way only need to save their work, commit their changes, and push up to their repository that's probably on GitHub.

![](images/rstudio_gui.png){fig-alt="A screenshot of RStudio's Graphical User Interface that allows users to interact with the git version control system" fig-align="center" width="100%"}

## Command Line Terminals

For the hardcore git veterans (or for those that just want a 'fluff-free' git experience), the command line may be their tool of choice. RStudio users have the option of interacting with their system's terminal within RStudio; but [git bash](https://www.atlassian.com/git/tutorials/git-bash) and standard terminal shell programs like [PowerShell](https://en.wikipedia.org/wiki/PowerShell) for Windows and [Terminal](https://en.wikipedia.org/wiki/Terminal_(macOS)) for macOs can also be used outside of RStudio.

![](images/git_bash.png){fig-alt="A screenshot of the Git Bash application. An example of a Command Line Terminal." fig-align="center"}

## Git GUI Clients

For the "fluffiest" git experience, users can use [third-party Git GUI clients](https://git-scm.com/downloads/guis) like [GitHub Desktop](https://desktop.github.com/) or [GitKraken](https://www.gitkraken.com/). Git GUI clients can be free or proprietary and usually have some added benefits like improved error messaging, accessibility to most git commands and functionality, and in some cases added visualizations to assist with general version control and commit histories.

![](images/gh_desktop.png){fig-alt="A screenshot of the Git Client program GitHub Desktop" fig-align="center" width="100%"}

## Which Method Should I Use?

Whatever you feel most comfortable with. Unless the organization you are collaborating with explicitly states you must use one method over the other, any method of git interaction will provide the same results. The only time this may not be true is if your work requires ***very advanced*** git operations. Most work does not fall into this category. Remember, **you don't get brownie points** for using a terminal, and **your Data Science 'card' won't be revoked** if you prefer a third-party GUI client. Use whatever takes the least amount of time and pain based on your experience and skill set.

# What is `git merge` And Why Are People Afraid of It?

At it's core, `git merge` is simply how users can join two or more development histories, (AKA: *git* *branches*) together. `git merge` is essential to working collaboratively in git simply because it is the proper way incorporate git's functionality of version control into your work. When used properly, this allows users to safely modify existing work or create additional work that can be safely incorporated into a online repository that others can then work and interact with.

If `git merge` is simply just joining branches together...it can't be all that bad right?

Nope. Wrong. Please understand that this is a **overly simple** explanation of what `git merge` is. One can literally spend hours reading documentation/content on the different types of git merges. It is a rabbit hole reserved only for those brave enough to enter.

It is without a doubt that most people who are afraid of git merges are afraid because of `git merge` conflicts; The bane of every git user's existence.

![When the <s>intern</s> <em>any git newbie</em> experiences their first git merge conflict](images/mergeburn.gif){fig-alt="Someone tries to add something to a pot on a stove with a long stick. The pot quickly is set on fire. The room quickly fills with fire." fig-align="center"}

# What is A `git merge` Conflict?

As intimidating as it is...the concept of a `git merge` conflict is actually quite simple:

> *"Merge conflicts occur when **competing changes** are made to the same line of a file, or when one person edits a file and another person deletes the same file."*
>
> \- [GitHub Docs](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line) *("Resolving a merge conflict using the command line")*

So if it's this simple...why is it intimidating? Probably because your once beautiful-looking code can get riddled with greater-than `>>>>` and less-than `<<<<` signs seemingly without warning:

![](images/conflict_code.png){fig-align="center"}

# `git merge` Conflicts in the Wild

# Preparing For Better Merges
